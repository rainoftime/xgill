#!/usr/bin/perl

# Sixgill: Static assertion checker for C/C++ programs.
# Copyright (C) 2009-2010  Stanford University
# Author: Brian Hackett
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# intercept calls to gcc and run the xgill plugin to generate databases.
# this should be used in concert with build_xgill.

#################################
# environment specific settings #
#################################

use FindBin;
use Cwd 'abs_path';

# Some installations of ccache will put another gcc wrapper in $PATH, and we
# may end up calling ourselves indirectly recursively if the directory
# containing this script is in $PATH. So remove it. Also heuristically throw
# out the ccache entry in $PATH.
my @paths = grep { !/ccache/ && abs_path($_) ne abs_path($FindBin::Bin) } split(/:/, $ENV{PATH});
$ENV{PATH} = join(':', @paths);

# directory containing the real versions of the gcc binaries.
my ($gccdir) = grep { defined($_) && (abs_path($_) ne abs_path($FindBin::Bin)) && (-x "$_/gcc") }
                    ($ENV{GCCDIR}, split(/:/, $ENV{PATH}), "/usr/local/bin");
die "Cannot find real gcc binaries" if ! $gccdir;

my ($xsource) = grep { (-x "$_/xsource") } (split(/:/, $ENV{PATH}), "$FindBin::Bin/../../bin");
die "Cannot find xsource binary" if ! $xsource;
$xsource .= "/xsource";

my ($plugindir) = grep { (-x "$_/xgill.so") } $FindBin::Bin, "$FindBin::Bin/../../gcc";
die "Cannot find plugin xgill.so\n" if not $plugindir;

my $wrapdir = $FindBin::Bin;

##########################
# general purpose script #
##########################

# get the name of the binary we are emulating.
my $ccname = shift or die "USAGE: basecc ccname ccarg*\n";

# read in the configuration data if there is any.
my $basedir = "";
my $logfile = "";
my $remote = "";
my $extra = "";
my $config_file = $ENV{XGILL_CONFIG} || "$wrapdir/xgill.config";
if (-e $config_file) {
    open(CONFIG, "<", $config_file) or die "open $config_file: $!";
    $basedir = <CONFIG>; chomp $basedir;
    $logfile = <CONFIG>; chomp $logfile;
    $remote = <CONFIG>; chomp $remote;
    $extra = <CONFIG>; chomp $extra;
    close(CONFIG);
}

# arguments to pass to xsource.
my $sourceargs;
$sourceargs .= " -basedir=$basedir" if ($basedir ne "");
$sourceargs .= " -log=$logfile" if ($logfile ne "");
$sourceargs .= " -remote=$remote" if ($remote ne "");

# plugin arguments to pass to the compiler.
my $xgillargs = " -DXGILL_PLUGIN -fplugin=$plugindir/xgill.so";
$xgillargs .= " -fplugin-arg-xgill-gcc=$gccdir/gcc";
$xgillargs .= " -fplugin-arg-xgill-basedir=$basedir" if ($basedir ne "");
$xgillargs .= " -fplugin-arg-xgill-remote=$remote" if ($remote ne "");
$xgillargs .= " -fplugin-arg-xgill-log=$logfile" if ($logfile ne "");
$xgillargs .= " $extra";

# original arguments to pass onto cc.
my $args;

# preprocessed arguments to accumulate source contents.
my $ppargs = "-E -DXGILL_PLUGIN";

# whether we have an input file.
my $has_input = 0;

my $have_E = 0;
my $have_M = 0;
my $have_MD = 0;

while (my $arg = shift) {
    if ($arg eq "-o") {
        # remove output file from preprocessed args.
        my $output = shift;
        $args .= " -o '$output'";
    }
    else {
        $has_input = 1 if ($arg =~ /\.c$/);
        $has_input = 1 if ($arg =~ /\.cpp$/);
        $has_input = 1 if ($arg =~ /\.cc$/);
        $has_input = 1 if ($arg =~ /\.C$/);

        $args .= " '$arg'";

	# gcc -M means to produce dependency info, which we do not
	# want to run under the plugin because xsource will choke on
	# it. But gcc -MD can be used to produce dependency info as a
	# side effect, in which case we *do* need the real output,
	# just not the dependency output.
	$have_E = 1  if $arg =~ /^-E/;
	$have_M = 1  if $arg =~ /^-MM?$/;
	$have_MD = 1 if $arg =~ /^-MM?D$/;

        $ppargs .= " '$arg'";
    }
}

$has_input = 0 if $have_M || ($have_MD && $have_E);

my $cwd = `pwd`;
chomp $cwd;

# get the command for the plugin and store in the environment.
# this is an end run around the restrictions on what can be passed as
# an argument to a gcc plugin (can't mix quotes, can't use '=').
$ENV{'XGILL_COMMAND'} = "$cwd: $ccname $args";

if ($logfile ne "") {
    open(OUT,">> $logfile");
    print OUT "\nCommand: $cwd\n";
    print OUT "$gccdir/$ccname $xgillargs $args\n";
    close(OUT);
}

my $code;

if (!$has_input || $passthrough) {
    # just run the original argument, nothing for us to do here.
    $code = system("$gccdir/$ccname $args") / 256;
    exit($code);
}

# run the command we were asked to do, with the plugin arguments.
$code = system("$gccdir/$ccname $xgillargs $args") / 256;

if ($code == 0) {
    # get the source and preprocessed code.
    $code = system("$gccdir/$ccname $ppargs | $xsource $sourceargs") / 256;
    if ($code ne 0) {
        open(OUT,">> $logfile");
        print OUT "*** ERROR: Preprocessor failure\n";
        close(OUT);
        $code = 0;
    }
}
else {
    # retry without the plugin arguments.
    $code = system("$gccdir/$ccname $args") / 256;

    if ($code == 0) {
        # worked with the plugin disabled, plugin bug.
        if ($logfile ne "") {
            open(OUT,">> $logfile");
            print OUT "*** ERROR: Failure with plugin enabled\n";
            close(OUT);
        }
    }
}

exit($code);
